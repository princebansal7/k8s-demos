apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: princebansal7/nginx-custom:blue-v4
          # image: princebansal7/nginx-custom:green-v4
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-demo
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80 # nginx pod's PORT (should match containerPort in pod spec as actual app is listening on this PORT, if some app listen on say 3000, update it to 3000)
      nodePort: 30007 # node's PORT on which pod is running
  type: NodePort

# Details about PORTS used:
# - containerPort (pod spec)
#   - The port the containerized process listens on (e.g., nginx listens on 80).
#   - Informational for Kubernetes and readers; it does NOT open host ports by itself.
#   - Can be numeric or named (useful when targetPort references a name).

# - service.spec.port
#   - The port the Service exposes inside the cluster (ClusterIP).
#   - Clients inside the cluster talk to ServiceIP:port.
#   - This is the “logical” port of the Service.

# - service.spec.targetPort
#   - The port on the Pod that the Service forwards traffic to.
#   - Usually equals the containerPort, but can be different or be a named port depending on the app listening to which port.
#   - If omitted, defaults to service.spec.port.

# - service.spec.nodePort (only for type: NodePort or LoadBalancer)

# - A port on each Node’s IP (typically in 30000–32767) that forwards to the Service.
# - External clients can reach the Service via nodeIP:nodePort.
# - For LoadBalancer services, the cloud LB forwards to this nodePort.

# - Flow when using NodePort/LoadBalancer:
#   client -> nodeIP:nodePort -> Service (port) -> targetPort -> containerPort

# Notes:
# - You don’t have to set containerPort for the Pod to work, but it’s recommended.
# - targetPort can be a name that matches the container port name.
# - If you want external access, use NodePort or LoadBalancer (or Ingress) rather than relying on containerPort alone.
